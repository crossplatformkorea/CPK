generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  male
  female
  intersex
}

enum AuthType {
  email
  google
  apple
}

model User {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email            String?
  fullName         String?   @map("full_name")
  name             String?
  displayName      String?   @map("display_name")
  avatarUrl        String?   @map("avatar_url")
  phoneVerified    Boolean?  @default(false) @map("phone_verified")
  providerId       String?   @map("provider_id")
  sub              String?
  provider         AuthType  @default(email)
  description      String?
  birthday         DateTime?
  gender           Gender?
  phone            String?
  locale           String?
  confirmedAt      DateTime? @map("confirmed_at")
  emailConfirmedAt DateTime? @map("email_confirmed_at")
  lastSignInAt     DateTime? @map("last_sign_in_at")

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  developers          Developer[]
  notifications       Notification[]
  notificationsTarget Notification[] @relation("NotificationTargetUser")
  replies             Reply[]
  reports             Report[]
  reportsTarget       Report[]       @relation("ReportTargetUser")
  likes               Like[]
  posts               Post[]
  blockUsers          Block[]        @relation("BlockUser")
  blocks              Block[]

  @@map("users")
}

enum Nationality {
  SouthKorea
  UnitedStates
  Unknown
}

model Developer {
  id                              String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                           String? @unique
  bio                             String?
  nationality                     String? @default("Unknown")
  organization                    String?
  meetupId                        String? @map("meetup_id")
  githubId                        String? @map("github_id")
  twitterId                       String? @map("twitter_id")
  threadsId                       String? @map("threads_id")
  /// 연결되고 싶은 분
  desiredConnection               String? @map("desired_connection")
  /// 행사 참여중일 때 동기 입력
  motivationForEventParticipation String? @map("motivation_for_event_participation")
  /// 앞으로 기대하는 것
  futureExpectations              String? @map("future_expectations")

  createdAt DateTime? @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  tags Tag[]

  userId String? @map("user_id") @db.Uuid
  user   User?   @relation(fields: [userId], references: [id])

  @@map("developers")
}

model Post {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title     String
  content   String
  url       String?
  viewCount Int?    @default(0) @map("view_count")

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id") @db.Uuid

  tags          Tag[]
  notifications Notification[]
  images        Image[]
  replies       Reply[]
  reports       Report[]
  likes         Like[]

  @@map("posts")
}

enum NotificationType {
  Like
  UserFollowYou
  FollowingFollowUser
  FollowingCreatePost
  NewReplyInComment
  NewCommentInPost

  @@map("activity_type")
}

model Notification {
  id        String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type      NotificationType
  createdAt DateTime?        @default(now()) @map("created_at")

  /// The sender of the activity
  srcUser   User   @relation(fields: [srcUserId], references: [id])
  srcUserId String @map("src_user_id") @db.Uuid

  /// The receiver of the activity
  user    User?   @relation(fields: [userId], references: [id], "NotificationTargetUser")
  userId  String? @map("user_id") @db.Uuid
  reply   Reply?  @relation(fields: [replyId], references: [id])
  replyId String? @map("replyId") @db.Uuid
  post    Post?   @relation(fields: [postId], references: [id])
  postId  String? @map("post_id") @db.Uuid
  link    String?

  @@unique([srcUserId, userId, replyId, type])
  @@unique([srcUserId, userId, postId, type])
  @@index([srcUserId, userId, type])
  @@map("notifications")
}

enum FileType {
  Audio
  Video
  Document
  Image
}

model Image {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  thumbUrl  String?   @map("thumb_url")
  imageUrl  String?   @map("image_url")
  url       String?   @map("url")
  name      String?   @map("name")
  size      BigInt?   @default(0)
  duration  Int?      @default(0)
  exif      String?
  height    Int?      @default(0)
  width     Int?      @default(0)
  mimeType  String?   @map("mime_type")
  encoding  String?   @map("encoding")
  type      FileType? @default(Image) @map("type")
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  post    Post?   @relation(fields: [postId], references: [id])
  postId  String? @map("post_id") @db.Uuid
  reply   Reply?  @relation(fields: [replyId], references: [id])
  replyId String? @map("reply_id") @db.Uuid

  @@index(postId)
  @@index(replyId)
  @@map("images")
}

model Reply {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  message String

  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz()

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id") @db.Uuid

  post   Post?   @relation(fields: [postId], references: [id])
  postId String? @map("post_id") @db.Uuid

  reply   Reply?  @relation(fields: [replyId], references: [id], name: "ReplyToReply")
  replyId String? @map("reply_id") @db.Uuid

  likes         Like[]
  reports       Report[]
  replies       Reply[]        @relation("ReplyToReply")
  notifications Notification[]
  images        Image[]

  @@map("replies")
}

model Report {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title     String
  content   String
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz()

  srcUser   User   @relation(fields: [srcUserId], references: [id])
  srcUserId String @map("src_user_id") @db.Uuid

  user   User?   @relation(fields: [userId], references: [id], name: "ReportTargetUser")
  userId String? @map("user_id") @db.Uuid

  reply   Reply?  @relation(fields: [replyId], references: [id])
  replyId String? @map("reply_id") @db.Uuid

  post   Post?   @relation(fields: [postId], references: [id])
  postId String? @map("post_id") @db.Uuid

  @@map("reports")
}

model Like {
  id    String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  liked Boolean

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id") @db.Uuid

  reply   Reply?  @relation(fields: [replyId], references: [id])
  replyId String? @map("reply_id") @db.Uuid

  post   Post?   @relation(fields: [postId], references: [id])
  postId String? @map("post_id") @db.Uuid

  @@unique([userId, postId])
  @@map("likes")
}

model Tag {
  id  String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tag String @unique @db.Uuid

  developers Developer[]
  posts      Post[]

  @@index(tag)
  @@map("tags")
}

model Block {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz()

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id") @db.Uuid

  blockUser   User   @relation(fields: [blockUserId], references: [id], name: "BlockUser")
  blockUserId String @map("block_user_id") @db.Uuid

  @@unique([userId, blockUserId])
  @@map("blocks")
}
